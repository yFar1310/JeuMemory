
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jeumemory;



import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.Timer;

/**
 *
 * @author mc485207
 */
public class JeuMemory extends javax.swing.JFrame {
     
   private LesJoueurs joueurs;//les joueurs séléctionnées
   private LesPersonnages persos;//en fonction de niveau + ou - de personnages
   private Jeu monJeu; // pour la gestion d’un tour de jeu
   private int l1, c1, l2, c2; // indices des cartes sélectionnées à chaque tour de jeu
   int niveau;
    public JeuMemory() {
        initComponents();//construction de l'interface par l'IDE
        //initialisation des attributs
         this.joueurs=new LesJoueurs();
         this.persos=new LesPersonnages(4);
         this.monJeu=new Jeu(this.persos,this.joueurs,4);
         reintVal();//méthode pour reintialiser les valeurs des positions(l1,c1,l2,c2) de cartes à -1
         this.setSize(1000,600);
    }
     //méthode pour reintialiser les valeurs des positions de cartes à -1
    public void reintVal(){
         this.l1=-1;
         this.l2=-1;
         this.c1=-1;
         this.c2=-1;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PInfos = new javax.swing.JPanel();
        PHaut = new javax.swing.JPanel();
        NbPersosT = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        NbPersosR = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JC = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Edition = new javax.swing.JTextArea();
        PBas = new javax.swing.JPanel();
        BDemarée = new javax.swing.JButton();
        BRecommencer = new javax.swing.JButton();
        Panneau = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        MParamètres = new javax.swing.JMenu();
        Options = new javax.swing.JMenuItem();
        AjoutJoueur = new javax.swing.JMenuItem();
        MVisualiser = new javax.swing.JMenu();
        MJoueur = new javax.swing.JMenuItem();
        MCarte = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PInfos.setLayout(new java.awt.BorderLayout());

        PHaut.setLayout(new java.awt.GridLayout(5, 1));
        PHaut.add(NbPersosT);
        PHaut.add(jLabel1);
        PHaut.add(NbPersosR);
        PHaut.add(jLabel2);

        JC.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        PHaut.add(JC);

        PInfos.add(PHaut, java.awt.BorderLayout.NORTH);

        Edition.setColumns(20);
        Edition.setRows(5);
        jScrollPane1.setViewportView(Edition);

        PInfos.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        PBas.setLayout(new java.awt.GridLayout(1, 2));

        BDemarée.setText("Démarrer");
        BDemarée.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDemaréeActionPerformed(evt);
            }
        });
        PBas.add(BDemarée);

        BRecommencer.setText("Recommencer");
        BRecommencer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRecommencerActionPerformed(evt);
            }
        });
        PBas.add(BRecommencer);

        PInfos.add(PBas, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PInfos, java.awt.BorderLayout.WEST);
        getContentPane().add(Panneau, java.awt.BorderLayout.CENTER);

        MParamètres.setText("Paramètres");

        Options.setText("Options");
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });
        MParamètres.add(Options);

        AjoutJoueur.setText("Ajout Joueur");
        AjoutJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjoutJoueurActionPerformed(evt);
            }
        });
        MParamètres.add(AjoutJoueur);

        jMenuBar1.add(MParamètres);

        MVisualiser.setText("Visualiser");

        MJoueur.setText("Joueurs");
        MJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MJoueurActionPerformed(evt);
            }
        });
        MVisualiser.add(MJoueur);

        MCarte.setText("Carte");
        MCarte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCarteActionPerformed(evt);
            }
        });
        MVisualiser.add(MCarte);

        jMenuBar1.add(MVisualiser);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //gestionnaire de la boite de dialogue InitDlg
    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
    InitDlg diag= new InitDlg(this, true);
    diag.setVisible(true);
    //on récupère le niveau
        niveau=diag.getNiveau();//niveau du jeu
        //on initialise les personnages et le jeu avec ce niveau
        this.persos=new LesPersonnages(niveau);
        this.monJeu=new Jeu(this.persos,this.joueurs,niveau);
    if (diag.getOk() ) // accesseur pour récupérer l’indicateur
    {//boite férmée par valider
     //on récupère LesJoueurs choisis et on les ajoute dans joueurs
        LesJoueurs lj = diag.getJoueurs(); // accesseur pour récupérer les joueurs saisies
        for(int i=0;i<lj.getNbJoueurs();i++){
            this.joueurs.ajouteJoueur(lj.getJoueur(i));
            
                    }
    }
    diag.setSize(1000,600);
    }//GEN-LAST:event_OptionsActionPerformed
    //gestionnaire de la boite de dialogue VisuJoueursDlg
    private void MJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MJoueurActionPerformed
        VisuJoueursDlg diag= new VisuJoueursDlg(this, true, this.joueurs);
        diag.setVisible(true);
        diag.setSize(1000,600);
        diag.dispose();
    }//GEN-LAST:event_MJoueurActionPerformed
    //gestionnaire de la boite de dialogue SaisieJoueurDlg
    private void AjoutJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutJoueurActionPerformed
        SaisieJoueurDlg diag= new SaisieJoueurDlg(this, true,new LesPersonnages(32));
        diag.setVisible(true);
        if (diag.getOk() == true ) // accesseur pour récupérer l’indicateur
        { Joueur j = diag.getJoueur(); // accesseur pour récupérer le joueur saisi
          this.joueurs.ajouteJoueur(j);
          j.setPhoto(diag.getPhoto());
        }
        diag.setSize(1000,600);
    }//GEN-LAST:event_AjoutJoueurActionPerformed
    //gestionnaire de la boite de dialogue VisuPersonnagesDlg
    private void MCarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MCarteActionPerformed
        VisuPersonnagesDlg diag= new VisuPersonnagesDlg(this, true, joueurs.getJoueur(this.monJeu.getIndC()));       
        diag.setVisible(true);
        diag.setSize(1000,600);
    }//GEN-LAST:event_MCarteActionPerformed
    //gestionnaire du clic sur le bouton Démarrer
    private void BDemaréeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDemaréeActionPerformed
        //teste 2 joueurs
        if(this.joueurs.getNbJoueurs()<2)
            Edition.setText("Choisissez 2 joueurs ou plus");
        else
        {
            Edition.setText("");
            BDemarée.setEnabled(false);
            BRecommencer.setEnabled(true);
            Options.setEnabled(false);
            AjoutJoueur.setEnabled(false);
            MJoueur.setEnabled(true);
            MCarte.setEnabled(true);
            //affichage du nombre de personnages
            int nc=this.monJeu.getPlateau().getNbc();//nombre de cases
            int npt=0;//nombre de personnages trouvées
            int npr =this.monJeu.getPlateau().getNbp();//nombre de personnages restants
            NbPersosT.setText("Nombre de personnages trouvées :" + npt);
            NbPersosR.setText("Nombre de personnages restants :" + npr);
            JC.setText("C'est à " +this.joueurs.getJoueur(this.monJeu.getIndC()).getPseudo()+" de jouer !");
            //on va construire dynamiquement les cartes(boutons)
            int l=this.monJeu.getPlateau().getNblig();
            int c=this.monJeu.getPlateau().getNbcol();
            Panneau.setLayout(new GridLayout(l,c));
            //boucle de création de boutons
            for(int i=0;i<2*nc;i++)
            {
                JButton bt=new JButton();
                bt.setName(""+i);
                bt.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent evt){
                boutonActionPerformed(evt);
                                                            }
                });
                
                    
            Panneau.add(bt);
            }
            
        }
    }//GEN-LAST:event_BDemaréeActionPerformed

   //gestionnaire du clic sur le bouton recommencer
    private void BRecommencerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRecommencerActionPerformed
        for(int i=0;i<2*this.persos.getTaille();i++){
            JButton jb=(JButton)Panneau.getComponent(i);
            jb.setIcon(null);
        }
        this.repaint();
        Panneau.removeAll();
        Options.setEnabled(true);
        AjoutJoueur.setEnabled(true);
        this.NbPersosR.setText("");
        this.NbPersosT.setText("");
        JC.setText("");
        Edition.setText("");
        BDemarée.setEnabled(true);
        this.monJeu.getPlateau().initPlateauJeu();
        this.joueurs.supprimeJoueurs();
        this.persos.retirePersos();
    }//GEN-LAST:event_BRecommencerActionPerformed
     
    //gestionnaire de de clic sur une carte du jeu
    private void boutonActionPerformed(ActionEvent evt){
         JButton jb=(JButton)evt.getSource();
         int n=Integer.parseInt(jb.getName());
         int lig=n/this.monJeu.getPlateau().getNbcol();
         int col=n-this.monJeu.getPlateau().getNbcol()*lig;
         int val =this.monJeu.getPlateau().getCase(lig, col);
         Personnage p=this.persos.getPerso(val);
         p.setImgBouton(jb);
         if(this.l1==-1 && this.c1==-1)
         {l1=lig;
          c1=col;
                 }
         else
             if(this.l2==-1 && this.c2==-1){
                 l2=lig;
                 c2=col;
                 startTimer();
                 }
         
         
         
     }
     
     //méthode qui permet d’avoir un temps d’attente, après le clic sur la 2ème carte, pour que le joueur voit les 2 cartes avant leur traitement
     public void startTimer(){
        // définit un timer qui lance la vérification des deux personnages au bout d'une demi-seconde
        Timer t = new Timer(500, new ActionListener(){
        public void actionPerformed(ActionEvent ae){
        verifPersos();
        }
        });
        t.setRepeats(false);
        t.start();
        }
     //méthode qui vérifie les personnages des deux cartes retournées
     public void verifPersos(){
         int nc=this.monJeu.getPlateau().getNbc();//nombre de cases
            int npt=0;//nombre de personnages trouvées
            int npr =this.monJeu.getPlateau().getNbp();//nombre de personnages restants
        if(this.monJeu.getPlateau().getCase(l1, c1)==this.monJeu.getPlateau().getCase(l2, c2)){// les personnages des deux cartes sont identiques
            String fam=this.persos.getPerso(this.monJeu.getPlateau().getCase(l2, c2)).getFamille();
            int positionButton1 = l1*this.monJeu.getPlateau().getNbcol()+c1; // on récupère la position du bouton 1
            int positionButton2 = l2*this.monJeu.getPlateau().getNbcol()+c2; // on récupère la position du bouton 2
            JButton button1 = (JButton)Panneau.getComponent(positionButton1); // on récupère le bouton 1
            JButton button2 = (JButton)Panneau.getComponent(positionButton2); // on récupère le bouton 2
            button1.setEnabled(false);
            button2.setEnabled(false);
        int bonus =this.monJeu.traiterTour(this.monJeu.getJoueurCourant(), this.monJeu.getPlateau().getCase(l1, c1));
            if(bonus >=0){
                Edition.append("\n"+this.monJeu.getJoueurCourant()+"a gagné tous les personnages de la famille " +fam+"\n");
                switch (bonus) {
                    case 0:
                        this.monJeu.getPlateau().termineJeu();
                        Edition.append(this.monJeu.getJoueurCourant().getPseudo()+" a gagné \n");
                        for(int i=0;i<2*this.persos.getTaille();i++){
                            JButton jb=(JButton)Panneau.getComponent(i);
                            jb.setEnabled(false);
                        }   
                        break;
                    case 1:
                        {   
                            TransfertDlg diag =new TransfertDlg(this,true,joueurs,this.monJeu.getIndC());
                            diag.setSize(1000,600);
                            for(int i=0;i<this.joueurs.getNbJoueurs();i++){
                                if(this.joueurs.getJoueur(i).getPaquet().getTaille()!=0 && i!=this.monJeu.getIndC())
                                {
                                    diag.setVisible(true);
                                   Edition.append("\n"+diag.getTransfert().getDeroulement());
                            }
                            }
                            
                            break;
                        }
                    case 2:
                        {
                            BatailleDlg diag=new BatailleDlg(this, true, this.joueurs, this.monJeu.getIndC());
                            diag.setVisible(true);
                            diag.setSize(1000,600);
                            diag.getBataille().execute();
                            Edition.append("\n"+diag.getBataille().getDeroulement());
                            break;
                        }
                    
                }
                bonus=-1;
                
                
            }
            this.monJeu.getPlateau().invalide(l1, c1, l2, c2);
            
            
                
                    npt++;
                    npr--;
                
            
            NbPersosT.setText("Nombre de personnages trouvées :" + (nc-this.monJeu.getPlateau().getNbp()));
            NbPersosR.setText("Nombre de personnages restants :" + this.monJeu.getPlateau().getNbp());
            this.reintVal();
        }
        else{
            int positionButton1 = l1*this.monJeu.getPlateau().getNbcol()+c1; // on récupère la position du bouton 1
            int positionButton2 = l2*this.monJeu.getPlateau().getNbcol()+c2; // on récupère la position du bouton 2
            JButton button1 = (JButton)Panneau.getComponent(positionButton1); // on récupère le bouton 1
            JButton button2 = (JButton)Panneau.getComponent(positionButton2); // on récupère le bouton 2
            button1.setIcon(null); // on efface la photo retourner par le joueur
            button2.setIcon(null); // on efface la photo retourner par le joueur
            
            this.reintVal();
            
            
                changeJoueurCourant();
                Edition.append("\n Tour avec joueur :"+this.joueurs.getJoueur(this.monJeu.getIndC()).toString()+"\n");
                JC.setText("C'est à " +this.monJeu.getJoueurCourant().getPseudo()+" de jouer !");
        
        }
        if(this.monJeu.getPlateau().jeuVide())
                Edition.append("les gagnants sont : \n"+this.joueurs.getGagnants().toString()+"\n");
     }
         
        //méthode pour changer le joueur courant au joueur suivant 
        public void changeJoueurCourant(){
        int nbJoueur = this.joueurs.getNbJoueurs();
        int prochainJoueurCourant = this.monJeu.getIndC()+1;
        if(prochainJoueurCourant == nbJoueur){ // permet de faire une boucle, pour 2 joueurs par ex : joueur 0 ensuite j1 puis  j0, j1, etc ... 
            prochainJoueurCourant = 0;
        }
        this.monJeu.setJoueurCourant(prochainJoueurCourant);//Le joueur courant change et est fixé au joueur suivant.      
    }
         
         
         
     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JeuMemory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AjoutJoueur;
    private javax.swing.JButton BDemarée;
    private javax.swing.JButton BRecommencer;
    private javax.swing.JTextArea Edition;
    private javax.swing.JLabel JC;
    private javax.swing.JMenuItem MCarte;
    private javax.swing.JMenuItem MJoueur;
    private javax.swing.JMenu MParamètres;
    private javax.swing.JMenu MVisualiser;
    private javax.swing.JLabel NbPersosR;
    private javax.swing.JLabel NbPersosT;
    private javax.swing.JMenuItem Options;
    private javax.swing.JPanel PBas;
    private javax.swing.JPanel PHaut;
    private javax.swing.JPanel PInfos;
    private javax.swing.JPanel Panneau;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
